Practical 1 Aim : Document Indexing and Retrieval
Implement an inverted index construction algorithm.
Build a simple document retrieval system using the constructed index. Code:-
import nltk
nltk.download('punkt_tab')

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
nltk.download('stopwords')
nltk.download('punkt')
class InvertedIndex:
    def __init__(self):
        self.index = {}
    def add_document(self, doc_id, content):
        stop_words = set(stopwords.words('english'))
        words = word_tokenize(content) 
        filtered_words = [word.lower() for word in words if word.isalnum() and word.lower() not in stop_words]
        for word in set(filtered_words):
            if word not in self.index:
                self.index[word] = []
            self.index[word].append(doc_id)
    def search(self, query):
        return self.index.get(query.lower(), [])
if __name__ == "__main__":
    inverted_index = InvertedIndex()
    documents = {
        1: "Inverted index is a data structure.",
        2: "This is an example of inverted index construction.",
        3: "The algorithm constructs an inverted index from documents."
    }
    print("Documents:", documents)
    for doc_id, content in documents.items():
        inverted_index.add_document(doc_id, content)
    search_query = input("Please enter the word you want to search: ")
    result = inverted_index.search(search_query)
    if result:
        print(f"Documents containing '{search_query}': {result}")
    else:
        print(f"No documents found containing '{search_query}'")Output:-



